// Code generated by mockery v2.45.0. DO NOT EDIT.

package mockamqp091

import mock "github.com/stretchr/testify/mock"

// MockAcknowledger is an autogenerated mock type for the Acknowledger type
type MockAcknowledger struct {
	mock.Mock
}

type MockAcknowledger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAcknowledger) EXPECT() *MockAcknowledger_Expecter {
	return &MockAcknowledger_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields: tag, multiple
func (_m *MockAcknowledger) Ack(tag uint64, multiple bool) error {
	ret := _m.Called(tag, multiple)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(tag, multiple)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAcknowledger_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockAcknowledger_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
//   - tag uint64
//   - multiple bool
func (_e *MockAcknowledger_Expecter) Ack(tag interface{}, multiple interface{}) *MockAcknowledger_Ack_Call {
	return &MockAcknowledger_Ack_Call{Call: _e.mock.On("Ack", tag, multiple)}
}

func (_c *MockAcknowledger_Ack_Call) Run(run func(tag uint64, multiple bool)) *MockAcknowledger_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool))
	})
	return _c
}

func (_c *MockAcknowledger_Ack_Call) Return(_a0 error) *MockAcknowledger_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAcknowledger_Ack_Call) RunAndReturn(run func(uint64, bool) error) *MockAcknowledger_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Nack provides a mock function with given fields: tag, multiple, requeue
func (_m *MockAcknowledger) Nack(tag uint64, multiple bool, requeue bool) error {
	ret := _m.Called(tag, multiple, requeue)

	if len(ret) == 0 {
		panic("no return value specified for Nack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool, bool) error); ok {
		r0 = rf(tag, multiple, requeue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAcknowledger_Nack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nack'
type MockAcknowledger_Nack_Call struct {
	*mock.Call
}

// Nack is a helper method to define mock.On call
//   - tag uint64
//   - multiple bool
//   - requeue bool
func (_e *MockAcknowledger_Expecter) Nack(tag interface{}, multiple interface{}, requeue interface{}) *MockAcknowledger_Nack_Call {
	return &MockAcknowledger_Nack_Call{Call: _e.mock.On("Nack", tag, multiple, requeue)}
}

func (_c *MockAcknowledger_Nack_Call) Run(run func(tag uint64, multiple bool, requeue bool)) *MockAcknowledger_Nack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *MockAcknowledger_Nack_Call) Return(_a0 error) *MockAcknowledger_Nack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAcknowledger_Nack_Call) RunAndReturn(run func(uint64, bool, bool) error) *MockAcknowledger_Nack_Call {
	_c.Call.Return(run)
	return _c
}

// Reject provides a mock function with given fields: tag, requeue
func (_m *MockAcknowledger) Reject(tag uint64, requeue bool) error {
	ret := _m.Called(tag, requeue)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, bool) error); ok {
		r0 = rf(tag, requeue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAcknowledger_Reject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reject'
type MockAcknowledger_Reject_Call struct {
	*mock.Call
}

// Reject is a helper method to define mock.On call
//   - tag uint64
//   - requeue bool
func (_e *MockAcknowledger_Expecter) Reject(tag interface{}, requeue interface{}) *MockAcknowledger_Reject_Call {
	return &MockAcknowledger_Reject_Call{Call: _e.mock.On("Reject", tag, requeue)}
}

func (_c *MockAcknowledger_Reject_Call) Run(run func(tag uint64, requeue bool)) *MockAcknowledger_Reject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool))
	})
	return _c
}

func (_c *MockAcknowledger_Reject_Call) Return(_a0 error) *MockAcknowledger_Reject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAcknowledger_Reject_Call) RunAndReturn(run func(uint64, bool) error) *MockAcknowledger_Reject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAcknowledger creates a new instance of MockAcknowledger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAcknowledger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAcknowledger {
	mock := &MockAcknowledger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
